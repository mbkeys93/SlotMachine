// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SlotMachineAPI.Data;

#nullable disable

namespace SlotMachineAPI.Migrations
{
    [DbContext(typeof(SlotMachineDbContext))]
    partial class SlotMachineDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("SlotMachineAPI.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsWin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SpinDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SpinResult")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("UsedFreeSpin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("WinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SlotMachineAPI.Models.Symbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Symbols");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nine",
                            Value = 0.25m,
                            Weight = 256
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ten",
                            Value = 0.50m,
                            Weight = 128
                        },
                        new
                        {
                            Id = 3,
                            Name = "Jack",
                            Value = 1.00m,
                            Weight = 64
                        },
                        new
                        {
                            Id = 4,
                            Name = "Queen",
                            Value = 2.00m,
                            Weight = 32
                        },
                        new
                        {
                            Id = 5,
                            Name = "King",
                            Value = 4.00m,
                            Weight = 16
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ace",
                            Value = 8.00m,
                            Weight = 8
                        },
                        new
                        {
                            Id = 7,
                            Name = "Bonus",
                            Value = 0.00m,
                            Weight = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "Jackpot",
                            Value = 100.00m,
                            Weight = 2
                        });
                });

            modelBuilder.Entity("SlotMachineAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FreeSpins")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Multiplier")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SlotMachineAPI.Models.Game", b =>
                {
                    b.HasOne("SlotMachineAPI.Models.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SlotMachineAPI.Models.User", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
