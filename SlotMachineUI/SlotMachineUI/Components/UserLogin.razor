@using SlotMachineUI.Models
@using SlotMachineUI.Services
@inject ISlotMachineService SlotMachineService

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6" Class="mb-4">Welcome to the Slot Machine!</MudText>
        
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Login">
                <MudContainer Class="mt-4">
                    <MudText Typo="Typo.body2" Class="mb-4">Enter your username to continue playing</MudText>
                    
                    <MudTextField @bind-Value="LoginUserName" 
                                 Label="Username" 
                                 Variant="Variant.Outlined"
                                 Class="mb-4"
                                 Style="max-width: 300px;"
                                 Immediate="true" />
                    
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               OnClick="LoginUser"
                               Disabled="string.IsNullOrWhiteSpace(LoginUserName)">
                        Login
                    </MudButton>
                </MudContainer>
            </MudTabPanel>
            
            <MudTabPanel Text="Create New User">
                <MudContainer Class="mt-4">
                    <MudText Typo="Typo.body2" Class="mb-4">Create a new account to start playing</MudText>
                    
                    <MudTextField @bind-Value="NewUserName" 
                                 Label="Username" 
                                 Variant="Variant.Outlined"
                                 Class="mb-4"
                                 Style="max-width: 300px;"
                                 Immediate="true" />
                    
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Success" 
                               OnClick="CreateUser"
                               Disabled="string.IsNullOrWhiteSpace(NewUserName)">
                        Create Account
                    </MudButton>
                </MudContainer>
            </MudTabPanel>
            
            <MudTabPanel Text="Recent Users">
                <MudContainer Class="mt-4">
                    <MudText Typo="Typo.body2" Class="mb-4">Select from recent players</MudText>
                    
                    @if (isLoadingUsers)
                    {
                        <MudProgressCircular Indeterminate="true" />
                    }
                    else if (recentUsers.Any())
                    {
                        <MudSelect T="User" 
                                   Label="Select User" 
                                   Variant="Variant.Outlined"
                                   Class="mb-4"
                                   Style="max-width: 300px;"
                                   @bind-Value="selectedUser">
                            @foreach (var user in recentUsers)
                            {
                                <MudSelectItem Value="@user">
                                    @($"{user.UserName} (Balance: ${user.Balance:F2})")
                                </MudSelectItem>
                            }
                        </MudSelect>
                        
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   OnClick="() => SelectUser(selectedUser)"
                                   Disabled="selectedUser == null">
                            Login Selected User
                        </MudButton>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary">No recent users found.</MudText>
                    }
                </MudContainer>
            </MudTabPanel>
        </MudTabs>
    </MudCardContent>
</MudCard>

@code {
    private string LoginUserName { get; set; } = "";
    private string NewUserName { get; set; } = "";
    private List<User> recentUsers = new();
    private bool isLoadingUsers = false;
    private User selectedUser;

    [Parameter]
    public EventCallback<User> OnUserCreated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentUsers();
    }

    private async Task LoadRecentUsers()
    {
        isLoadingUsers = true;
        try
        {
            var allUsers = await SlotMachineService.GetAllUsersAsync();
            recentUsers = allUsers.OrderByDescending(u => u.ModifiedDateTime).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            isLoadingUsers = false;
        }
    }

    private async Task LoginUser()
    {
        if (string.IsNullOrWhiteSpace(LoginUserName))
            return;

        Console.WriteLine($"Attempting to login user: {LoginUserName}");
        
        var user = await SlotMachineService.GetUserByUsernameAsync(LoginUserName);
        
        if (user != null)
        {
            Console.WriteLine($"User logged in successfully: {user.UserName} (ID: {user.UserId})");
            Console.WriteLine($"User balance: {user.Balance}, Free spins: {user.FreeSpins}, Can play: {user.CanPlay}");
            await OnUserCreated.InvokeAsync(user);
            Console.WriteLine("OnUserCreated event invoked");
        }
        else
        {
            Console.WriteLine($"User not found: {LoginUserName}");
            // You could show an error message here
        }
    }

    private async Task CreateUser()
    {
        if (string.IsNullOrWhiteSpace(NewUserName))
            return;

        Console.WriteLine($"Attempting to create user: {NewUserName}");
        
        var user = await SlotMachineService.CreateUserAsync(NewUserName);
        
        if (user != null)
        {
            Console.WriteLine($"User created/retrieved successfully: {user.UserName} (ID: {user.UserId})");
            Console.WriteLine($"User balance: {user.Balance}, Free spins: {user.FreeSpins}, Can play: {user.CanPlay}");
            await OnUserCreated.InvokeAsync(user);
            Console.WriteLine("OnUserCreated event invoked");
            
            // Refresh the recent users list
            await LoadRecentUsers();
        }
        else
        {
            Console.WriteLine("Failed to create user - service returned null");
        }
    }

    private async Task SelectUser(User user)
    {
        Console.WriteLine($"Selected user: {user.UserName} (ID: {user.UserId})");
        await OnUserCreated.InvokeAsync(user);
    }
} 